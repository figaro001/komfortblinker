
MyKomfortBlinker_v1.04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000044d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000448  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000050  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000725  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001c7  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000549  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000037a  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000026e  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a7 36       	cpi	r26, 0x67	; 103
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	bb d0       	rcall	.+374    	; 0x1a4 <main>
  2e:	c0 c1       	rjmp	.+896    	; 0x3b0 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <_Z15Not_Blink_Statev>:

uint8_t Not_Blink_State (void)	// Проверка на принудительную отмену включенного поворотника, т.е. например работает левый поворотник
								// и мы коротким касанием правого поворотника отменяем действие левого поворотника
{
	uint8_t j = 0; // переменная j
	if ((blink_flag == 0x01) && ((my_key_state | 0b11111110) == 0b11111110)) j	= 1; 
  32:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blink_flag>
  36:	81 30       	cpi	r24, 0x01	; 1
  38:	39 f4       	brne	.+14     	; 0x48 <__SREG__+0x9>


uint8_t Not_Blink_State (void)	// Проверка на принудительную отмену включенного поворотника, т.е. например работает левый поворотник
								// и мы коротким касанием правого поворотника отменяем действие левого поворотника
{
	uint8_t j = 0; // переменная j
  3a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <my_key_state>
  3e:	9e 6f       	ori	r25, 0xFE	; 254
  40:	9e 3f       	cpi	r25, 0xFE	; 254
  42:	69 f0       	breq	.+26     	; 0x5e <__SREG__+0x1f>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	08 95       	ret
	if ((blink_flag == 0x01) && ((my_key_state | 0b11111110) == 0b11111110)) j	= 1; 
	// включен поворотник вправо, коротким касанием поворотноком влево отменяем моргание, т.е. проверяем побитовым ИЛИ (OR) 2-й разряд на "0"
	if ((blink_flag == 0x02) && ((my_key_state | 0b11111101) == 0b11111101)) j	= 1; 
  48:	82 30       	cpi	r24, 0x02	; 2
  4a:	41 f4       	brne	.+16     	; 0x5c <__SREG__+0x1d>


uint8_t Not_Blink_State (void)	// Проверка на принудительную отмену включенного поворотника, т.е. например работает левый поворотник
								// и мы коротким касанием правого поворотника отменяем действие левого поворотника
{
	uint8_t j = 0; // переменная j
  4c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <my_key_state>
  50:	9d 6f       	ori	r25, 0xFD	; 253
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	9d 3f       	cpi	r25, 0xFD	; 253
  56:	19 f0       	breq	.+6      	; 0x5e <__SREG__+0x1f>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	08 95       	ret
  5c:	80 e0       	ldi	r24, 0x00	; 0
	if ((blink_flag == 0x01) && ((my_key_state | 0b11111110) == 0b11111110)) j	= 1; 
	// включен поворотник вправо, коротким касанием поворотноком влево отменяем моргание, т.е. проверяем побитовым ИЛИ (OR) 2-й разряд на "0"
	if ((blink_flag == 0x02) && ((my_key_state | 0b11111101) == 0b11111101)) j	= 1; 
	// включен поворотник влево, коротким касанием поворотноком вправо отменяем моргание, т.е. проверяем побитовым ИЛИ (OR) 1-й разряд на "0"
	return j;
}
  5e:	08 95       	ret

00000060 <_Z11Reset_Relayv>:

void Reset_Relay (void) // подпрограмма возврата к исходмону состоянию, когда все выключено и мы ждем нажатия поворотника или аварийки
{
  60:	cf 93       	push	r28
	 PORTB			&=	~(1<<Out_Links);
  62:	c3 98       	cbi	0x18, 3	; 24
	 // записываем "0" в порт Aus_Links (PORTB3), т.е. выключаем транзистор и размыкаем цепь принудительного удержания левого поворотника
	 // для записи  1 в порт: PORTB |= 1 << Aus_Links, т.е. замкнуть контакты левого поворотника через транзистор;
	 PORTB			&=	~(1<<Out_Rechts);	
  64:	c4 98       	cbi	0x18, 4	; 24
	 // записываем "0" в порт Aus_Rechts (PORTB4), т.е. выключаем транзистор и размыкаем цепь принудительного удержания правого поворотника
	 blink_flag		=				0x00;	// обнуляем флаг
  66:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <blink_flag>
	 blink_counter	=				0x00;	// обнуляем счетчик
  6a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <blink_counter>
	 my_puls		=				0x00;	// обнуляем переменную для хранения состояния количества повторений морганий
  6e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <my_puls>
	 if (ee_flag == 0x00)	// если находимся в режиме настроек, то пропускаем паузу (в случае нехватки памяти, проверку можно удалить)
  72:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ee_flag>
  76:	81 11       	cpse	r24, r1
  78:	0e c0       	rjmp	.+28     	; 0x96 <_Z11Reset_Relayv+0x36>
  7a:	c0 e0       	ldi	r28, 0x00	; 0
	 {
		for (uint8_t i = 0; i < eeprom_read_byte(&ee_Pause_Blinks); i++)
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	83 d1       	rcall	.+774    	; 0x388 <eeprom_read_byte>
  82:	c8 17       	cp	r28, r24
  84:	40 f4       	brcc	.+16     	; 0x96 <_Z11Reset_Relayv+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	8f ed       	ldi	r24, 0xDF	; 223
  88:	9e e2       	ldi	r25, 0x2E	; 46
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <_Z11Reset_Relayv+0x2a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_Z11Reset_Relayv+0x30>
  90:	00 00       	nop
  92:	cf 5f       	subi	r28, 0xFF	; 255
  94:	f3 cf       	rjmp	.-26     	; 0x7c <_Z11Reset_Relayv+0x1c>
		// включенный, поворотник был автоматически отщелкнут возвратом руля из поворота на право. Так сказать, устраняем механический дефект
		{
			_delay_ms(10);				// ждем 10 миллисекунд
		}//for
	 }//if
}
  96:	cf 91       	pop	r28
  98:	08 95       	ret

0000009a <_Z12Get_Key_Datav>:

uint8_t Get_Key_Data (void) // Подпрограмма опроса состояния входов с антидребезгом
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	uint8_t k;							// переменная "k"
	do 
	{
		k = (PINB & 0b00100111);		// методом побитового И "&" определяем состояние только первых 3-х разрядов (0b00000 "1" "1" "1"),
  9e:	d6 b3       	in	r29, 0x16	; 22
  a0:	d7 72       	andi	r29, 0x27	; 39
		if (ee_flag == 0x00)
  a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ee_flag>
  a6:	81 11       	cpse	r24, r1
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <__stack+0x23>
  aa:	c0 e0       	ldi	r28, 0x00	; 0
		{
			for (uint8_t t = 0; t < eeprom_read_byte(&ee_Pause_Keys); t++)
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	6b d1       	rcall	.+726    	; 0x388 <eeprom_read_byte>
  b2:	c8 17       	cp	r28, r24
  b4:	60 f4       	brcc	.+24     	; 0xce <__stack+0x2f>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	80 ea       	ldi	r24, 0xA0	; 160
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <__stack+0x19>
  bc:	00 00       	nop
  be:	cf 5f       	subi	r28, 0xFF	; 255
  c0:	f5 cf       	rjmp	.-22     	; 0xac <__stack+0xd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	8f e5       	ldi	r24, 0x5F	; 95
  c4:	99 e0       	ldi	r25, 0x09	; 9
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <__stack+0x27>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <__stack+0x2d>
  cc:	00 00       	nop
		}//if
		else
		{
			_delay_ms(2);				// ждем 2 миллисекунды
		}//else
	} while (k != (PINB & 0b00100111)); 
  ce:	86 b3       	in	r24, 0x16	; 22
}

uint8_t Get_Key_Data (void) // Подпрограмма опроса состояния входов с антидребезгом
{
	uint8_t k;							// переменная "k"
	do 
  d0:	2d 2f       	mov	r18, r29
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	87 72       	andi	r24, 0x27	; 39
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	28 17       	cp	r18, r24
  da:	39 07       	cpc	r19, r25
  dc:	01 f7       	brne	.-64     	; 0x9e <_Z12Get_Key_Datav+0x4>
		}//else
	} while (k != (PINB & 0b00100111)); 
	// сравниваем i (состояние портов до паузы) и текущее состояние портов. Если состояния разные, что в нашем случее верно,
	// переходим опять в начало цикла и вновь считываем значения портов, ждем, повторяем чтение и сравниваем. Если состояния одинаковые,
	// а значит мы предполагаем что считали устойчивое состояние портов, то по условию "while" это "fulse" мы завершаем подпрограмму и
	asm volatile("wdr");				// сброс сторожевого таймера WDT	
  de:	a8 95       	wdr
	return k;							// возвращаем в основную программу текущее состояние портов
}
  e0:	8d 2f       	mov	r24, r29
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_Z19Get_Kurz_Lang_Druckv>:

uint8_t Get_Kurz_Lang_Druck (void)		// Подпрограмма опроса длительности нажатия кнопки. 2.
{
  e8:	cf 93       	push	r28
	uint8_t i = 0;
	do
	{
		my_key_state = Get_Key_Data();						// получаем состояние входов
  ea:	d7 df       	rcall	.-82     	; 0x9a <_Z12Get_Key_Datav>
  ec:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <my_key_state>
	} while ((my_key_state & 0b00100000) == 0b00100000);	// если кнопка не нажата, то просто ждем нажатия для продолжения работы
  f0:	85 fd       	sbrc	r24, 5
  f2:	fb cf       	rjmp	.-10     	; 0xea <_Z19Get_Kurz_Lang_Druckv+0x2>
	
	while (((my_key_state | 0b11011111) == 0b11011111) && (i < 0xC8)) 
  f4:	8f 6d       	ori	r24, 0xDF	; 223
  f6:	8f 3d       	cpi	r24, 0xDF	; 223
  f8:	61 f4       	brne	.+24     	; 0x112 <_Z19Get_Kurz_Lang_Druckv+0x2a>
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_Z19Get_Kurz_Lang_Druckv+0x1a>
  fe:	c8 3c       	cpi	r28, 0xC8	; 200
 100:	49 f0       	breq	.+18     	; 0x114 <_Z19Get_Kurz_Lang_Druckv+0x2c>
	// (0xC8=200)200*2ms = !!! 3 секунды. Нажатие меньше 3 сек. принимаем за короткое нажатие. Непонятно, почему фактически получается 3с.
	{
		my_key_state = Get_Key_Data();	// получаем состояние входов
 102:	cb df       	rcall	.-106    	; 0x9a <_Z12Get_Key_Datav>
 104:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <my_key_state>
		i++;							// увеличиваем счетчик на 1 (означает 10 ms)
 108:	cf 5f       	subi	r28, 0xFF	; 255
	do
	{
		my_key_state = Get_Key_Data();						// получаем состояние входов
	} while ((my_key_state & 0b00100000) == 0b00100000);	// если кнопка не нажата, то просто ждем нажатия для продолжения работы
	
	while (((my_key_state | 0b11011111) == 0b11011111) && (i < 0xC8)) 
 10a:	8f 6d       	ori	r24, 0xDF	; 223
 10c:	8f 3d       	cpi	r24, 0xDF	; 223
 10e:	b9 f3       	breq	.-18     	; 0xfe <_Z19Get_Kurz_Lang_Druckv+0x16>
 110:	01 c0       	rjmp	.+2      	; 0x114 <_Z19Get_Kurz_Lang_Druckv+0x2c>
 112:	c0 e0       	ldi	r28, 0x00	; 0
	{
		my_key_state = Get_Key_Data();	// получаем состояние входов
		i++;							// увеличиваем счетчик на 1 (означает 10 ms)
	}
	return i;
}
 114:	8c 2f       	mov	r24, r28
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <_Z21Get_Kurz_Lang_Counterv>:

uint8_t Get_Kurz_Lang_Counter (void)	// Подпрограмма счета коротких нажатий и ожидания длинного нажатия кнопки. 1.
{
 11a:	cf 93       	push	r28
	uint8_t j = 0;
	blink_counter = Get_Kurz_Lang_Druck(); // получаем число от 0 до 0xC8 (200)
 11c:	e5 df       	rcall	.-54     	; 0xe8 <_Z19Get_Kurz_Lang_Druckv>
 11e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <blink_counter>
	while ((blink_counter < 0xC8) && (j < 0xFE)) 
 122:	88 3c       	cpi	r24, 0xC8	; 200
 124:	58 f4       	brcc	.+22     	; 0x13c <_Z21Get_Kurz_Lang_Counterv+0x22>
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <_Z21Get_Kurz_Lang_Counterv+0x14>
 12a:	ce 3f       	cpi	r28, 0xFE	; 254
 12c:	41 f0       	breq	.+16     	; 0x13e <_Z21Get_Kurz_Lang_Counterv+0x24>
	//считаем колличество коротких нажатий (blink_counter < 0xC8), максимально возможное колличество нажатий 254 (j < 0xFE).
	{
		j++;
 12e:	cf 5f       	subi	r28, 0xFF	; 255
		blink_counter = Get_Kurz_Lang_Druck();
 130:	db df       	rcall	.-74     	; 0xe8 <_Z19Get_Kurz_Lang_Druckv>
 132:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <blink_counter>

uint8_t Get_Kurz_Lang_Counter (void)	// Подпрограмма счета коротких нажатий и ожидания длинного нажатия кнопки. 1.
{
	uint8_t j = 0;
	blink_counter = Get_Kurz_Lang_Druck(); // получаем число от 0 до 0xC8 (200)
	while ((blink_counter < 0xC8) && (j < 0xFE)) 
 136:	88 3c       	cpi	r24, 0xC8	; 200
 138:	c0 f3       	brcs	.-16     	; 0x12a <_Z21Get_Kurz_Lang_Counterv+0x10>
 13a:	01 c0       	rjmp	.+2      	; 0x13e <_Z21Get_Kurz_Lang_Counterv+0x24>
	return i;
}

uint8_t Get_Kurz_Lang_Counter (void)	// Подпрограмма счета коротких нажатий и ожидания длинного нажатия кнопки. 1.
{
	uint8_t j = 0;
 13c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		j++;
		blink_counter = Get_Kurz_Lang_Druck();
	}
	return j;
}
 13e:	8c 2f       	mov	r24, r28
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <_Z11Blink_Relayh>:
	
void Blink_Relay (uint8_t pulsData)
{
 144:	cf 93       	push	r28
 146:	c8 2f       	mov	r28, r24
	PORTB			|= (1<<Out_Links); 	// включаем удержание левого поворотника (записываем в порт логическую "1")
 148:	c3 9a       	sbi	0x18, 3	; 24
	PORTB			|= (1<<Out_Rechts);	// включаем удержание правого поворотника (записываем в порт логическую "1")
 14a:	c4 9a       	sbi	0x18, 4	; 24
	blink_flag		= 0x05;				// устанавливаем флаг для обозбачения режима, в котором мы находимся
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blink_flag>
	do 
	{
		if (blink_flag == 0x08)
 152:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blink_flag>
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	31 f4       	brne	.+12     	; 0x166 <_Z11Blink_Relayh+0x22>
		// Проверяем, был ли установлен blink_flag в 0х08, т.е. это означает, что поворотник включен надолго или работает режим "Аварийка",
		// но мы уже моргнули нужное количество раз
		{
			if (my_key_state == 0b00000011)	
 15a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <my_key_state>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	f9 f4       	brne	.+62     	; 0x1a0 <_Z11Blink_Relayh+0x5c>
			// Проверяем, работает ли реле !!!В последствии убрать проверку поворотников, она здесь не нужна или нужна????
			{
				Reset_Relay();
 162:	7e df       	rcall	.-260    	; 0x60 <_Z11Reset_Relayv>
 164:	19 c0       	rjmp	.+50     	; 0x198 <_Z11Blink_Relayh+0x54>
			}
		}
		else
		{
			my_key_state = Get_Key_Data();	// опрашиваем состояния входов, нам важно состояние 6 и 3-го разрядов 
 166:	99 df       	rcall	.-206    	; 0x9a <_Z12Get_Key_Datav>
 168:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <my_key_state>
											// 0b00100000 - состояние по умолчанию
											//     |  |---> состояние реле		0 - выкл 1 - вкл
											//     |------> режим конфигурации	1 - выкл 0 - вкл
			if ((my_key_state | 0b11111011) == 0b11111011) // счетчик морганий, реле обесточено
 16c:	8b 6f       	ori	r24, 0xFB	; 251
 16e:	8b 3f       	cpi	r24, 0xFB	; 251
 170:	99 f4       	brne	.+38     	; 0x198 <_Z11Blink_Relayh+0x54>
			{
				if (blink_counter >= pulsData)
 172:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <blink_counter>
 176:	8c 17       	cp	r24, r28
 178:	30 f0       	brcs	.+12     	; 0x186 <_Z11Blink_Relayh+0x42>
				{ // моргнули нужное количество раз
					PORTB		&= ~(1<<Out_Links);		// выключаем удержание левого поворотника (записываем в порт логический "0")
 17a:	c3 98       	cbi	0x18, 3	; 24
					PORTB		&= ~(1<<Out_Rechts);	// выключаем удержание правого поворотника (записываем в порт логический "0")
 17c:	c4 98       	cbi	0x18, 4	; 24
					blink_flag	= 0x08;					// оставляем флаг для дальнейшей проверки, что происходит с реле...
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blink_flag>
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <_Z11Blink_Relayh+0x5c>
				}
				else // еще не доморгали нужное количество раз
				{
					blink_counter++;
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <blink_counter>
					while ((my_key_state | 0b11111011) == 0b11111011) // ожидание включения реле
					{
						my_key_state = Get_Key_Data();
 18c:	86 df       	rcall	.-244    	; 0x9a <_Z12Get_Key_Datav>
 18e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <my_key_state>
					blink_flag	= 0x08;					// оставляем флаг для дальнейшей проверки, что происходит с реле...
				}
				else // еще не доморгали нужное количество раз
				{
					blink_counter++;
					while ((my_key_state | 0b11111011) == 0b11111011) // ожидание включения реле
 192:	8b 6f       	ori	r24, 0xFB	; 251
 194:	8b 3f       	cpi	r24, 0xFB	; 251
 196:	d1 f3       	breq	.-12     	; 0x18c <_Z11Blink_Relayh+0x48>
						// опрашиваем состояния входов, еще должны проверить, не была ли инициирована отмена включенного поворотника
					} // while
				} // else
			} // if
		} // else
	} while (blink_flag == 0x05);
 198:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blink_flag>
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	c9 f2       	breq	.-78     	; 0x152 <_Z11Blink_Relayh+0xe>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <main>:
					Если PORTxy=1 то вывод в режиме PullUp с подтяжкой резистором в 100к до питания 
*/
 
 //DDRB &= ~(1<<PORTB2|1<<PORTB1|1<<PORTB0);	
 // конфигурируем порты PORTB2, PORTB1 и PORTB0 как ВХОДЫ. Не имеет смысла делать, т.к. они по умолчанию ВХОДЫ
 DDRB  |= 1<<Out_Rechts|1<<Out_Links;			// конфигурируем порты PORTB4 и PORTB3 как выходы
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	88 61       	ori	r24, 0x18	; 24
 1a8:	87 bb       	out	0x17, r24	; 23
 //PORTB |= 1<<PORTB1|1<<PORTB0;				
 // записываем в порты PORTB1 и PORTB0 "1", т.е. подтагиваем их через внутреннее сопротивление микроконтроллера (100кОм) к +5V.
 // Хотя на них постоянно будет +4,7v
 PORTB |= 1<<Conf_Taste|1<<PORTB1|1<<PORTB0;	
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	83 62       	ori	r24, 0x23	; 35
 1ae:	88 bb       	out	0x18, r24	; 24
 // Инициализация сторожевого таймера (перенесено из CodeVisionAVR, позже узнать как это работает и как корректно инициализиривать :) )
 // нужен для предотвращения зависания микроконтроллера и зацикливания программы
 // Watchdog Timer Prescaler: OSC/1024k
 // Watchdog Timer interrupt: Off
 //#pragma optsize-
 WDTCR=0x39; // 0b00111001
 1b0:	89 e3       	ldi	r24, 0x39	; 57
 1b2:	81 bd       	out	0x21, r24	; 33
 WDTCR=0x29; // 0b00101001
 1b4:	89 e2       	ldi	r24, 0x29	; 41
 1b6:	81 bd       	out	0x21, r24	; 33
 //#endif 
 
 // Global enable interrupts
 // sei(); // разрешаем прерывания
 
 if (eeprom_read_byte(&ee_init_conf_flag) != 0x04) // проверяем состояние конфигурации в  EEPROM
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	e5 d0       	rcall	.+458    	; 0x388 <eeprom_read_byte>
 1be:	84 30       	cpi	r24, 0x04	; 4
 1c0:	a1 f0       	breq	.+40     	; 0x1ea <main+0x46>
 {
	 eeprom_write_byte(&ee_Blinks,			0x04);
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	e6 d0       	rcall	.+460    	; 0x396 <eeprom_write_byte>
	 // устанавливаем количество повторений морганий поворотника. Значение по умолчанию 0х04
	 eeprom_write_byte(&ee_Danke_Blinks,	0x00);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	e2 d0       	rcall	.+452    	; 0x396 <eeprom_write_byte>
	 // устанавливаем количество повторений морганий режима Danke. Значение по умолчанию (0х02) 0x00 выключено
	 eeprom_write_byte(&ee_Pause_Blinks,	0x04);
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	de d0       	rcall	.+444    	; 0x396 <eeprom_write_byte>
	 // устанавливаем паузу между режимами работы поворотника. Значение по умолчанию 0х04 (4*10=40ms или 0,06 секунды)
	 eeprom_write_byte(&ee_Pause_Keys,		0x0A);
 1da:	6a e0       	ldi	r22, 0x0A	; 10
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	da d0       	rcall	.+436    	; 0x396 <eeprom_write_byte>
	 // устанавливаем паузу между опросами состояния кнопок. Значение по умолчанию 0х0A (10*10=100us или 0,1 секунды)
	 eeprom_write_byte(&ee_init_conf_flag,	0x04);
 1e2:	64 e0       	ldi	r22, 0x04	; 4
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	d6 d0       	rcall	.+428    	; 0x396 <eeprom_write_byte>
											   |------> режим конфигурации	1 - выкл 0 - вкл */
		//if((my_key_state | 0b11111111) != 0b11111111) // нажата ли кнопка настройки (PORTB5) - заглушка, когда нужно убрать подпрограму 
														// записи настроек в память
		if((my_key_state | 0b11011111) == 0b11011111) // нажата ли кнопка настройки (PORTB5)
		{
			ee_flag = 0x01;		// обозначаем, что мы в режиме конфигурации
 1ea:	c1 e0       	ldi	r28, 0x01	; 1
					switch (my_key_state & 0b00000111) // проверка на включение
					{
						case 0b00000000: // выключаем удержание поворотников (и правого и левого)
							PORTB			&= ~(1<<Out_Links);		// выключаем удержание левого поворотника (записываем в порт логический "0")
							PORTB			&= ~(1<<Out_Rechts);	// выключаем удержание правого поворотника (записываем в порт логический "0")
							blink_flag		= 0x08;
 1ec:	d8 e0       	ldi	r29, 0x08	; 8
	 // устанавливаем флаг 0х04, означает, что в память записано 4-e параметра и начальная конфигурация проведена
 } 
 
	while(1) // основной цикл программы
    {
		my_key_state = Get_Key_Data();	/* 0b00100011 - значение по умолчанию, левый и правый поворотники "висят" в воздухе и притянуты к +12V, 
 1ee:	55 df       	rcall	.-342    	; 0x9a <_Z12Get_Key_Datav>
 1f0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <my_key_state>
											   |||----> влево реле			0 - выкл 1 - вкл
											   ||-----> вправо реле			0 - выкл 1 - вкл
											   |------> режим конфигурации	1 - выкл 0 - вкл */
		//if((my_key_state | 0b11111111) != 0b11111111) // нажата ли кнопка настройки (PORTB5) - заглушка, когда нужно убрать подпрограму 
														// записи настроек в память
		if((my_key_state | 0b11011111) == 0b11011111) // нажата ли кнопка настройки (PORTB5)
 1f4:	8f 6d       	ori	r24, 0xDF	; 223
 1f6:	8f 3d       	cpi	r24, 0xDF	; 223
 1f8:	09 f0       	breq	.+2      	; 0x1fc <main+0x58>
 1fa:	3f c0       	rjmp	.+126    	; 0x27a <main+0xd6>
		{
			ee_flag = 0x01;		// обозначаем, что мы в режиме конфигурации
 1fc:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <ee_flag>
			Reset_Relay();		// на всякий пожарный выключим удержание поворотников и обнулим переменные
 200:	2f df       	rcall	.-418    	; 0x60 <_Z11Reset_Relayv>
			Blink_Relay(0x06);	// режим конфигурации, моргнем 7 (0,1,2,3,4,5,6) раз, мы в режиме установки колличества повторений
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	9f df       	rcall	.-194    	; 0x144 <_Z11Blink_Relayh>
								// морганий поворотника (uint8_t Blinks = 0x04;) - 4-е по умолчанию.
						
			ee_counter = Get_Kurz_Lang_Counter();
 206:	89 df       	rcall	.-238    	; 0x11a <_Z21Get_Kurz_Lang_Counterv>
			// если длинное нажатие на кнопку или колличество коротких нажатий превысило 254, то записываем колличество короткий нажатий
			// в память и переходим к настройке колличества морганий режима Danke.
			if (ee_counter > 0x00) 
 208:	81 11       	cpse	r24, r1
 20a:	03 c0       	rjmp	.+6      	; 0x212 <main+0x6e>
			ee_flag = 0x01;		// обозначаем, что мы в режиме конфигурации
			Reset_Relay();		// на всякий пожарный выключим удержание поворотников и обнулим переменные
			Blink_Relay(0x06);	// режим конфигурации, моргнем 7 (0,1,2,3,4,5,6) раз, мы в режиме установки колличества повторений
								// морганий поворотника (uint8_t Blinks = 0x04;) - 4-е по умолчанию.
						
			ee_counter = Get_Kurz_Lang_Counter();
 20c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 210:	07 c0       	rjmp	.+14     	; 0x220 <main+0x7c>
			// если длинное нажатие на кнопку или колличество коротких нажатий превысило 254, то записываем колличество короткий нажатий
			// в память и переходим к настройке колличества морганий режима Danke.
			if (ee_counter > 0x00) 
			{
				eeprom_write_byte(&ee_Blinks, --ee_counter);
 212:	6f ef       	ldi	r22, 0xFF	; 255
 214:	68 0f       	add	r22, r24
 216:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	bb d0       	rcall	.+374    	; 0x396 <eeprom_write_byte>
			// устанавливаем количество повторений морганий поворотника. Значение по умолчанию 0х04
			}// if
			
			Reset_Relay();		// на всякий пожарный выключим удержание поворотников и обнулим переменные
 220:	1f df       	rcall	.-450    	; 0x60 <_Z11Reset_Relayv>
			Blink_Relay(0x01);	
 222:	8c 2f       	mov	r24, r28
 224:	8f df       	rcall	.-226    	; 0x144 <_Z11Blink_Relayh>
			// моргнем 2-а (0,1) раза, и переходим в режим установки колличества повторений морганий режима Danke
			// (uint8_t Danke_Blinks = 0x02;) - 2-a по умолчанию.
			ee_counter = Get_Kurz_Lang_Counter();
 226:	79 df       	rcall	.-270    	; 0x11a <_Z21Get_Kurz_Lang_Counterv>
			// если длинное нажатие на кнопку или колличество коротких нажатий превысило 254, то записываем колличество коротких
			// нажатий в память и переходим к настройке колличества морганий режима Danke.
			if (ee_counter > 0x00)
 228:	81 11       	cpse	r24, r1
 22a:	03 c0       	rjmp	.+6      	; 0x232 <main+0x8e>
			
			Reset_Relay();		// на всякий пожарный выключим удержание поворотников и обнулим переменные
			Blink_Relay(0x01);	
			// моргнем 2-а (0,1) раза, и переходим в режим установки колличества повторений морганий режима Danke
			// (uint8_t Danke_Blinks = 0x02;) - 2-a по умолчанию.
			ee_counter = Get_Kurz_Lang_Counter();
 22c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 230:	07 c0       	rjmp	.+14     	; 0x240 <main+0x9c>
			// если длинное нажатие на кнопку или колличество коротких нажатий превысило 254, то записываем колличество коротких
			// нажатий в память и переходим к настройке колличества морганий режима Danke.
			if (ee_counter > 0x00)
			{
				eeprom_write_byte(&ee_Danke_Blinks, --ee_counter);
 232:	6f ef       	ldi	r22, 0xFF	; 255
 234:	68 0f       	add	r22, r24
 236:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	ab d0       	rcall	.+342    	; 0x396 <eeprom_write_byte>
			// устанавливаем количество повторений морганий режима Danke. Значение по умолчанию 0х02
			} // if
			
			Reset_Relay();		// на всякий пожарный выключим удержание поворотников и обнулим переменные
 240:	0f df       	rcall	.-482    	; 0x60 <_Z11Reset_Relayv>
			Blink_Relay(0x02);	// моргнем 3-а (0,1,2) раза, переходим в режим установки задержки (хххххх = 10;) - 10-ть по умолчанию 
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	7f df       	rcall	.-258    	; 0x144 <_Z11Blink_Relayh>
								// (10*50=500 миллисекунд)
			ee_counter = Get_Kurz_Lang_Counter();
 246:	69 df       	rcall	.-302    	; 0x11a <_Z21Get_Kurz_Lang_Counterv>
 248:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			// если длинное нажатие на кнопку или колличество коротких нажатий превысило 254, то записываем колличество короткий нажатий
			// в память и переходим к настройке колличества морганий режима Danke.
			if (ee_counter > 0x00)
 24c:	88 23       	and	r24, r24
 24e:	21 f0       	breq	.+8      	; 0x258 <main+0xb4>
			{
				eeprom_write_byte(&ee_Pause_Blinks, ee_counter);
 250:	68 2f       	mov	r22, r24
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	9f d0       	rcall	.+318    	; 0x396 <eeprom_write_byte>
			// устанавливаем количество повторений цикла для паузы между протвоположными состояниыми поворотника. Значение по умолчанию 0х04
			} // if
			
			Reset_Relay();		// на всякий пожарный выключим удержание поворотников и обнулим переменные
 258:	03 df       	rcall	.-506    	; 0x60 <_Z11Reset_Relayv>
			Blink_Relay(0x03);	// моргнем 4-е (0,1,2,3) раза, переходим в режим установки задержки (хххххх = 10;) - 10-ть по умолчанию
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	73 df       	rcall	.-282    	; 0x144 <_Z11Blink_Relayh>
								// (10*100=1000 микросекунд или 1 миллисекунда)
			ee_counter = Get_Kurz_Lang_Counter();
 25e:	5d df       	rcall	.-326    	; 0x11a <_Z21Get_Kurz_Lang_Counterv>
 260:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			// если длинное нажатие на кнопку или колличество коротких нажатий превысило 254, то записываем колличество короткий нажатий
			// в память и переходим к настройке колличества морганий режима Danke.
			if (ee_counter > 0x00)
 264:	88 23       	and	r24, r24
 266:	21 f0       	breq	.+8      	; 0x270 <main+0xcc>
			{
				eeprom_write_byte(&ee_Pause_Keys, ee_counter);
 268:	68 2f       	mov	r22, r24
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	93 d0       	rcall	.+294    	; 0x396 <eeprom_write_byte>
			// устанавливаем количество повторений цикла для паузы антидребезга. Значение по умолчанию 0х0А (10)
			} // if

			Reset_Relay();
 270:	f7 de       	rcall	.-530    	; 0x60 <_Z11Reset_Relayv>
			Blink_Relay(0x06);	// моргнем 7-ть (0,1,2,3,4,5,6) раз, этим показываем, что вышли из програмы настройки пользовательских установок
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	67 df       	rcall	.-306    	; 0x144 <_Z11Blink_Relayh>
			ee_flag = 0x00;  // сбрасываем флаг "режим конфигурации"
 276:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ee_flag>
		};//if
				
		not_state = Not_Blink_State();	// Проверка на принудительную отмену включенного поворотника, т.е. например работает левый поворотник
 27a:	db de       	rcall	.-586    	; 0x32 <_Z15Not_Blink_Statev>
 27c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <not_state>
										// и мы коротким касанием правого поворотника отменяем действие левого поворотника.
		if (not_state == 0x01) Reset_Relay();	// включен поворотник вправо, коротким касанием поворотноком влево отменяем моргание или
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	09 f4       	brne	.+2      	; 0x286 <main+0xe2>
 284:	ed de       	rcall	.-550    	; 0x60 <_Z11Reset_Relayv>
												// включен поворотник влево, коротким касанием поворотноком вправо отменяем моргание

		if ((blink_flag & 0x08) == 0x08)		// Проверяем, был ли установлен blink_flag в 0х08, т.е. это означает, что поворотник включен
 286:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blink_flag>
 28a:	83 ff       	sbrs	r24, 3
 28c:	08 c0       	rjmp	.+16     	; 0x29e <main+0xfa>
												// надолго или работает режим "Аварийка". 
		{
			if ((my_key_state & 0b00000111) == 0b00000011)	// Проверяем, работает ли реле и выключены ли при этом поворотники. Реле выключено,
 28e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <my_key_state>
 292:	87 70       	andi	r24, 0x07	; 7
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	09 f0       	breq	.+2      	; 0x29a <main+0xf6>
 298:	aa cf       	rjmp	.-172    	; 0x1ee <main+0x4a>
															// и поворотники выключены, то 
			{
				Reset_Relay();
 29a:	e2 de       	rcall	.-572    	; 0x60 <_Z11Reset_Relayv>
 29c:	a8 cf       	rjmp	.-176    	; 0x1ee <main+0x4a>
			}//if
		}//if
		else
		{
			if ((blink_flag & 0b00000111) > 0x00)						// Что-то было включено
 29e:	98 2f       	mov	r25, r24
 2a0:	97 70       	andi	r25, 0x07	; 7
 2a2:	b1 f1       	breq	.+108    	; 0x310 <main+0x16c>
			{
				if ((my_key_state | 0b11111011) == 0b11111011)			// счетчик морганий, реле обесточено
 2a4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <my_key_state>
 2a8:	9b 6f       	ori	r25, 0xFB	; 251
 2aa:	9b 3f       	cpi	r25, 0xFB	; 251
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x10c>
 2ae:	9f cf       	rjmp	.-194    	; 0x1ee <main+0x4a>
				{
					if ((blink_flag & 0x03) == 0x03)					// проверяем состояние флага 
 2b0:	83 70       	andi	r24, 0x03	; 3
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	31 f4       	brne	.+12     	; 0x2c2 <main+0x11e>
					{													// флаг был установлен в режим аварийки
						my_puls = eeprom_read_byte(&ee_Danke_Blinks);	// берем соответствующее количество морганий "Danke_Blinks"
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	66 d0       	rcall	.+204    	; 0x388 <eeprom_read_byte>
 2bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <my_puls>
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <main+0x128>
					} 
					else // флаг в режиме поворотника
					{
						my_puls = eeprom_read_byte(&ee_Blinks);			// берем соответствующее количество морганий "Blinks"
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	60 d0       	rcall	.+192    	; 0x388 <eeprom_read_byte>
 2c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <my_puls>
					}					
					if (blink_counter >= my_puls)
 2cc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <blink_counter>
 2d0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <my_puls>
 2d4:	89 17       	cp	r24, r25
 2d6:	28 f0       	brcs	.+10     	; 0x2e2 <main+0x13e>
					{ // моргнули нужное количество раз
						PORTB		&= ~(1<<Out_Links);		// выключаем удержание левого поворотника (записываем в порт логический "0")
 2d8:	c3 98       	cbi	0x18, 3	; 24
						PORTB		&= ~(1<<Out_Rechts);	// выключаем удержание правого поворотника (записываем в порт логический "0")
 2da:	c4 98       	cbi	0x18, 4	; 24
						blink_flag	= 0x08;					// оставляем флаг для дальнейшей проверки, что происходит с реле...
 2dc:	d0 93 65 00 	sts	0x0065, r29	; 0x800065 <blink_flag>
 2e0:	86 cf       	rjmp	.-244    	; 0x1ee <main+0x4a>
					} 
					else // еще не доморгали нужное количество раз
					{
						blink_counter++;
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <blink_counter>
						while ((my_key_state | 0b11111011) == 0b11111011 && not_state == 0x00)
 2e8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <my_key_state>
 2ec:	8b 6f       	ori	r24, 0xFB	; 251
 2ee:	8b 3f       	cpi	r24, 0xFB	; 251
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <main+0x150>
 2f2:	7d cf       	rjmp	.-262    	; 0x1ee <main+0x4a>
 2f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <not_state>
 2f8:	81 11       	cpse	r24, r1
 2fa:	79 cf       	rjmp	.-270    	; 0x1ee <main+0x4a>
						// ожидание включения реле и проверка на принудительную отмену включенного поворотника
						{
							my_key_state = Get_Key_Data();
 2fc:	ce de       	rcall	.-612    	; 0x9a <_Z12Get_Key_Datav>
 2fe:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <my_key_state>
							// опрашиваем состояния входов, по идее еще должны проверить, не была ли инициирована отмена включенного поворотника
							not_state = Not_Blink_State();	// Проверка на принудительную отмену включенного поворотника
 302:	97 de       	rcall	.-722    	; 0x32 <_Z15Not_Blink_Statev>
 304:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <not_state>
							if (not_state == 0x01) Reset_Relay();
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	71 f7       	brne	.-36     	; 0x2e8 <main+0x144>
 30c:	a9 de       	rcall	.-686    	; 0x60 <_Z11Reset_Relayv>
 30e:	ec cf       	rjmp	.-40     	; 0x2e8 <main+0x144>
					} // else
				} // if
			} // if
			else // ничего не включено
			{
				if (blink_flag == 0x00)
 310:	81 11       	cpse	r24, r1
 312:	6d cf       	rjmp	.-294    	; 0x1ee <main+0x4a>
						blink_flag		= 0x02;
						blink_counter	= 0x01;
					}
*/
/* */
					switch (my_key_state & 0b00000111) // проверка на включение
 314:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <my_key_state>
 318:	87 70       	andi	r24, 0x07	; 7
 31a:	85 30       	cpi	r24, 0x05	; 5
 31c:	e1 f0       	breq	.+56     	; 0x356 <main+0x1b2>
 31e:	18 f4       	brcc	.+6      	; 0x326 <main+0x182>
 320:	88 23       	and	r24, r24
 322:	31 f0       	breq	.+12     	; 0x330 <main+0x18c>
 324:	64 cf       	rjmp	.-312    	; 0x1ee <main+0x4a>
 326:	86 30       	cpi	r24, 0x06	; 6
 328:	11 f1       	breq	.+68     	; 0x36e <main+0x1ca>
 32a:	87 30       	cpi	r24, 0x07	; 7
 32c:	31 f0       	breq	.+12     	; 0x33a <main+0x196>
 32e:	5f cf       	rjmp	.-322    	; 0x1ee <main+0x4a>
					{
						case 0b00000000: // выключаем удержание поворотников (и правого и левого)
							PORTB			&= ~(1<<Out_Links);		// выключаем удержание левого поворотника (записываем в порт логический "0")
 330:	c3 98       	cbi	0x18, 3	; 24
							PORTB			&= ~(1<<Out_Rechts);	// выключаем удержание правого поворотника (записываем в порт логический "0")
 332:	c4 98       	cbi	0x18, 4	; 24
							blink_flag		= 0x08;
 334:	d0 93 65 00 	sts	0x0065, r29	; 0x800065 <blink_flag>
						break;	
 338:	5a cf       	rjmp	.-332    	; 0x1ee <main+0x4a>
						case 0b00000111: // режим аварийки или "спасибо"
							if (eeprom_read_byte(&ee_Danke_Blinks) != 0x00)
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	24 d0       	rcall	.+72     	; 0x388 <eeprom_read_byte>
 340:	88 23       	and	r24, r24
 342:	09 f4       	brne	.+2      	; 0x346 <main+0x1a2>
 344:	54 cf       	rjmp	.-344    	; 0x1ee <main+0x4a>
							{
								PORTB			|= 1<<Out_Links; 	// включаем удержание левого поворотника (записываем в порт логическую "1")
 346:	c3 9a       	sbi	0x18, 3	; 24
								PORTB			|= 1<<Out_Rechts;	// включаем удержание правого поворотника (записываем в порт логическую "1")
 348:	c4 9a       	sbi	0x18, 4	; 24
								blink_flag		= 0x03;
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blink_flag>
								blink_counter	= 0x01;
 350:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <blink_counter>
 354:	4c cf       	rjmp	.-360    	; 0x1ee <main+0x4a>
							blink_flag	= 0x01;
							blink_counter	= 0x00;
						break;
						*/
						case 0b00000101: // включен поворотник влево  и реле уже включилось
						if (eeprom_read_byte(&ee_Blinks) != 0x00)
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	16 d0       	rcall	.+44     	; 0x388 <eeprom_read_byte>
 35c:	88 23       	and	r24, r24
 35e:	09 f4       	brne	.+2      	; 0x362 <main+0x1be>
 360:	46 cf       	rjmp	.-372    	; 0x1ee <main+0x4a>
							{
								PORTB			|= 1<<Out_Links;	// включаем удержание левого поворотника (записываем в порт логическую "1")
 362:	c3 9a       	sbi	0x18, 3	; 24
								blink_flag		= 0x01;
 364:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <blink_flag>
								blink_counter	= 0x01;
 368:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <blink_counter>
 36c:	40 cf       	rjmp	.-384    	; 0x1ee <main+0x4a>
							blink_flag	= 0x02;
							blink_counter	= 0x00;
						break;
						*/
						case 0b00000110: // включен поворотник вправо и реле уже включилось
							if (eeprom_read_byte(&ee_Blinks) != 0x00)
 36e:	84 e0       	ldi	r24, 0x04	; 4
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0a d0       	rcall	.+20     	; 0x388 <eeprom_read_byte>
 374:	88 23       	and	r24, r24
 376:	09 f4       	brne	.+2      	; 0x37a <main+0x1d6>
 378:	3a cf       	rjmp	.-396    	; 0x1ee <main+0x4a>
							{
								PORTB			|= 1<<Out_Rechts;	// включаем удержание правого поворотника (записываем в порт логическую "1")
 37a:	c4 9a       	sbi	0x18, 4	; 24
								blink_flag		= 0x02;
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blink_flag>
								blink_counter	= 0x01;
 382:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <blink_counter>
 386:	33 cf       	rjmp	.-410    	; 0x1ee <main+0x4a>

00000388 <eeprom_read_byte>:
 388:	e1 99       	sbic	0x1c, 1	; 28
 38a:	fe cf       	rjmp	.-4      	; 0x388 <eeprom_read_byte>
 38c:	8e bb       	out	0x1e, r24	; 30
 38e:	e0 9a       	sbi	0x1c, 0	; 28
 390:	99 27       	eor	r25, r25
 392:	8d b3       	in	r24, 0x1d	; 29
 394:	08 95       	ret

00000396 <eeprom_write_byte>:
 396:	26 2f       	mov	r18, r22

00000398 <eeprom_write_r18>:
 398:	e1 99       	sbic	0x1c, 1	; 28
 39a:	fe cf       	rjmp	.-4      	; 0x398 <eeprom_write_r18>
 39c:	1c ba       	out	0x1c, r1	; 28
 39e:	8e bb       	out	0x1e, r24	; 30
 3a0:	2d bb       	out	0x1d, r18	; 29
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	e2 9a       	sbi	0x1c, 2	; 28
 3a8:	e1 9a       	sbi	0x1c, 1	; 28
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
